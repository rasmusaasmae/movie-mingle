generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum TorrentQuality {
  SD
  HD
  FHD
  UHD
  THREEDIMENSIONAL
  UNKNOWN
}

enum TorrentType {
  WEB
  BLURAY
  UNKNOWN
}

enum TorrentVideoCodec {
  x264
  x265
  UNKNOWN
}

model Torrent {
  movieId          Int               @map("movie_id")
  ytsUrl           String            @unique @map("yts_url")
  magnet           String
  hash             String            @unique
  quality          TorrentQuality
  type             TorrentType
  isRepack         Boolean           @map("is_repack")
  videoCodec       TorrentVideoCodec @map("video_codec")
  bitDepth         String            @map("bit_depth")
  audioChannels    String            @map("audio_channels")
  seeds            Int
  peers            Int
  size             String
  sizeBytes        BigInt            @map("size_bytes")
  dateUploaded     DateTime          @map("date_uploaded")
  dateUploadedUnix BigInt            @map("date_uploaded_unix")
  movie            Movie             @relation(fields: [movieId], references: [id])

  @@map("torrents")
}

enum Genre {
  Action
  Adventure
  Animation
  Biography
  Comedy
  Crime
  Documentary
  Drama
  Family
  Fantasy
  Film_Noir
  Game_Show
  History
  Horror
  Music
  Musical
  Mystery
  News
  Reality_TV
  Romance
  Sci_Fi
  Sport
  Talk_Show
  Thriller
  War
  Western
}

model Movie {
  id                      Int       @id @unique
  slug                    String    @unique
  ytsUrl                  String    @unique @map("yts_url")
  imdbCode                String    @unique @map("imdb_code")
  title                   String
  titleEnglish            String    @map("title_english")
  titleLong               String    @map("title_long")
  year                    Int
  imdbRating              Float     @map("imdb_rating")
  runtime                 Int
  ytsDownloadCount        Int?      @map("yts_download_count")
  ytsLikeCount            Int?      @map("yts_like_count")
  descriptionIntro        String?   @map("description_intro")
  descriptionFull         String?   @map("description_full")
  ytTrailerCode           String    @map("yt_trailer_code")
  language                String
  mpaRating               String    @map("mpa_rating")
  backgroundImage         String    @map("background_image")
  backgroundImageOriginal String    @map("background_image_original")
  smallCoverImage         String    @map("small_cover_image")
  mediumCoverImage        String    @map("medium_cover_image")
  largeCoverImage         String    @map("large_cover_image")
  genres                  Genre[]
  torrents                Torrent[]
  ratings                 Rating[]

  @@map("movies")
}

model Rating {
  id        String   @id
  movieId   Int      @map("movie_id")
  rating    Float
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([movieId, userId])
  @@map("ratings")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  ratings       Rating[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @map("id_token") @db.Text
  session_state      String? @map("session_state")
  oauth_token_secret String? @map("oauth_token_secret")
  oauth_token        String? @map("oauth_token")
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
